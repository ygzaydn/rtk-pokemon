import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useDispatch, useSelector } from "react-redux";
import { fetchPokemon } from "@/src/features/pokemonSlice";
import Pokemon from "@/src/components/pokemon";
import SelectedPokemon from "@/src/components/selectedPokemon";
import { useGetPokemonByIdQuery } from "@/src/features/pokemonApi";
import { useEffect, useRef, useState } from "react";
import PokemonWithRTK from "@/src/components/pokemonWithRTK";

const inter = Inter({ subsets: ["latin"] });

function getRandomInt(max) {
    return Math.floor(Math.random() * max);
}

export default function Home() {
    const [pokemons, setPokemons] = useState([]);
    const dispatch = useDispatch();
    const state = useSelector((state) => state.pokemon);
    const text = useRef("");
    const text2 = useRef("");

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${styles.main} ${inter.className}`}>
                <div
                    style={{
                        display: "flex",
                        alignItems: "stretch",
                        textAlign: "center",
                    }}
                >
                    <div style={{ margin: "0 2rem" }}>
                        <p>Fetching with asyncTrunk</p>
                        {state.loading && <p>Getting New Pokemon</p>}
                        <button
                            style={{ margin: ".5rem 0" }}
                            onClick={() =>
                                dispatch(fetchPokemon(getRandomInt(900)))
                            }
                        >
                            Fetch Random Pokemon
                        </button>
                        <div>
                            <input ref={text} />
                            <button
                                onClick={() =>
                                    dispatch(fetchPokemon(text.current.value))
                                }
                            >
                                Fetch this ID
                            </button>
                        </div>
                    </div>

                    <div>
                        <p>Fetching with RTK Query</p>

                        <button
                            style={{ margin: ".5rem 0" }}
                            onClick={() => {
                                const newPokemons = [...pokemons];
                                newPokemons.push(getRandomInt(900));
                                setPokemons(newPokemons);
                            }}
                        >
                            Fetch Random Pokemon
                        </button>
                        <div>
                            <input ref={text2} />
                            <button
                                onClick={() => {
                                    const newPokemons = [...pokemons];
                                    newPokemons.push(text2.current.value);
                                    setPokemons(newPokemons);
                                }}
                            >
                                Fetch this ID
                            </button>
                        </div>
                    </div>
                </div>

                {state.selectedPokemon?.id && (
                    <div>
                        <SelectedPokemon
                            name={state.selectedPokemon.name}
                            img={state.selectedPokemon.sprites.front_shiny}
                            id={state.selectedPokemon.id}
                        />
                    </div>
                )}

                <div>
                    {pokemons.length > 0 && (
                        <div>
                            <p>RTK Query Pokemons</p>
                            <div
                                style={{
                                    display: "flex",
                                    flexWrap: "wrap",
                                    justifyContent: "center",
                                }}
                            >
                                {pokemons.map((el) => (
                                    <PokemonWithRTK key={el} id={el} />
                                ))}
                            </div>
                        </div>
                    )}

                    {state.pokemons.length > 0 && (
                        <div style={{ margin: "2rem 0" }}>
                            <p>Async Thunk Pokemons</p>

                            <div
                                style={{
                                    display: "flex",
                                    flexWrap: "wrap",
                                    justifyContent: "center",
                                }}
                            >
                                {state.pokemons.map((el) => (
                                    <Pokemon
                                        key={el.name}
                                        name={el.name}
                                        img={el.sprites.front_shiny}
                                        id={el.id}
                                    />
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}
